* SSH login without password 					       :@ssh:
  From [[http://linuxproblem.org/art_9.html][here]]:
  - First log in on A as user a and generate a pair of authentication
    keys. Do not enter a passphrase:
    : a@A:~> ssh-keygen -t rsa
    : Generating public/private rsa key pair.
    : Enter file in which to save the key (/home/a/.ssh/id_rsa):
    : Created directory '/home/a/.ssh'.
    : Enter passphrase (empty for no passphrase):
    : Enter same passphrase again:
    : Your identification has been saved in /home/a/.ssh/id_rsa.
    : Your public key has been saved in /home/a/.ssh/id_rsa.pub.
    : The key fingerprint is:
    : 3e:4f:05:79:3a:9f:96:7c:3b:ad:e9:58:37:bc:37:e4 a@A.
  - Now use ssh to create a directory ~/.ssh as user b on B. (The
    directory may already exist, which is fine):
    : a@A:~> ssh b@B mkdir -p .ssh
    : b@B's password: 
  - Finally append a's new public key to b@B:.ssh/authorized_keys and
    enter b's password one last time:
    : a@A:~> cat .ssh/id_rsa.pub | ssh b@B 'cat >> .ssh/authorized_keys'
    : b@B's password: 
  - From now on you can log into B as b from A as a without password:
    : a@A:~> ssh b@B hostname
    : B
  
  A note from one of our readers: Depending on your version of SSH you might also have to do the following changes:

  - Put the public key in .ssh/authorized\_keys2
  - Change the permissions of .ssh to 700
  - Change the permissions of .ssh/authorized\n_keys2 to 640

* Installing lighttpd from MacPorts		:@macports:@lighttpd:@webdev:
  - Install php5 from MacPorts, with the fastcgi, imap, macosx, pear
    and sqlite variants. Easier using [[http://porticus.alittledrop.com/][Porticus]].
  - Install lighttpd from MacPorts, using either
    : sudo port install lighttpd
    or [[http://porticus.alittledrop.com/][Porticus]]
  - As suggested, enable the startup item that has been generated to
    aid in starting lighttpd with launchd.
    : sudo launchctl load -w /Library/LaunchDaemons/org.macports.lighttpd.plist
    - Start lighttpd with
      : sudo launchctl start org.macports.lighttpd
    - Stop lighttpd with
      : sudo launchctl stop org.macports.lighttpd
  - Copy the sample config file at
    /opt/local/etc/lighttpd/lighttpd.conf.default to
    /opt/local/etc/lighttpd/lighttpd.conf. The launchd daemon relies
    on the PID being at /opt/local/var/run/lighttpd.pid.
  - Edits (try to keep everything under /opt):
    - Set server.document-root to /opt/local/srv/www/htdocs/ and
      create it.
    - Set server.errorlog to /opt/local/var/log/lighttpd/error.log and
      create it with owner and group set to "www".
    - Set accesslog.filename to /opt/local/var/log/lighttpd/access.log
      and create it with owner and group set to "www".
    - Create /opt/local/var/run/ and /opt/local/var/run/lighttpd with
      owner and group set to "www".
    - Never run a webserver as root. So:
      - Set server.username to "www"
      - Set server.groupname to "www"
    - Enable fastcgi and execwrap
      : $HTTP["url"] =~ "^/~<user>/" {
      : fastcgi.server = ( ".php" =>
      :                 ( "localhost" =>
      :                  (
      :                     "socket" => "/opt/local/var/run/lighttpd/php-fastcgi.socket",
      :                     "bin-path" => "/opt/local/srv/www/fcgi-bin/execwrap",
      :                     "bin-environment" => (
      :                        "UID" => "<UID>",
      :                        "GID" => "<GID>",
      :                        "TARGET" => "/opt/local/srv/www/fcgi-bin/php5-cgi-wrapper",
      :                        "CHECK_GID" => "1",
      :                     )
      :                  )
      :                )
      :   }
      :   else $HTTP["url"] =~ ".*" {
      :      fastcgi.server = ( ".php" =>
      :                      ( "localhost" =>
      :                        (
      :                           "socket" => "/opt/local/var/run/lighttpd/php-fastcgi.socket",
      :                           "bin-path" => "/opt/local/bin/php-cgi"
      :                        )
      :                      )
      :                    )
      :   }
    - Userdir setup:
      - Set userdir.path to "Sites".
      - Set userdir.basepath to where the users homes live (usually
        "/Users/", unless they have been moved)
  - Build and install execwrap
    - Get the source. The original site at
      http://cyanite.org/execwrap/ seems to be down. From [[http://cgit.stbuehler.de/gitosis/execwrap/][here]],
      download the [[http://cgit.stbuehler.de/gitosis/execwrap/commit/%3Fid%3D6f3ffa2ea88c6537a5fe1f5c76c5a93bde7416a8][v0.5]] tag, which is the latest without the PAM
      intergration, which is not needed. This has no Makefile, so get
      it from [[http://cgit.stbuehler.de/gitosis/execwrap/plain/Makefile%3Fh%3Dstbuehler][here]].
    - Edit execwrap_config.h and set the following:
      : #define PARENT_UID              70   # UID of the www user
      : #define TARGET_MIN_UID          500  # Where the user UIDs start
      : #define TARGET_MIN_GID          500  # Where the user GIDs start
      : #define TARGET_PATH_PREFIX      "/opt/local/srv/www/"
    - Run make and try
      : sudo ./execwrap -V
      This should print the parameters as they were set in
      execwrap_config.h.
    - Make the /opt/local/srv/www/fcgi-bin/ directory and copy the
      executable to it. Set the permissions and ownership as follows:
      : sudo chgrp www
      : sudo chmod 750
      : sudo chmod u+s
    - In the same directory, create the wrapper file that will call
      PHP. With this setup, call it php5-cgi-wrapper. It should
      contain:
      : #!/bin/sh
      : umask 0027
      : exec /opt/local/bin/php-cgi
      and have ownership and permissions set as follows:
      : sudo chown <user>:www
      : sudo chmod 750

* Using "Open with" Emacs on a Mac                              :@emacs:@mac:
  This doesn't seem to be needed any more. Just assigning the files to
  open in Emacs seems to work fine. Anyways, [[http://bc.tech.coop/blog/070225.html][here]] is the original web
  page. In a nutshell:
  - Create a bash script to either call emacslient (if Emacs is
    already running) or Emacs itself (if it isn't running). The script
    has been modified for Emacs.app.
    : #!/bin/sh
    : /Applications/Emacs.app/Contents/MacOS/bin/emacsclient -n "${1}" 2> /dev/null
    : if [ $? -ne 0 ]; then
    :    open -a /Applications/Emacs.app "${1}"
    : fi
  - Use [[http://www.sveinbjorn.org/platypus][Platypus]] to wrap the script in an app. I guess we could also
    use Automator to make a script.

* Lighttpd and WebDAV                                     :@lighttpd:@webdav:
  - How To Set Up WebDAV With Lighttpd On Debian Etch
    http://www.howtoforge.com/setting-up-webdav-with-lighttpd-debian-etch
  - How To Set Up WebDAV With Lighttpd On Debian Lenny
    http://www.howtoforge.org/how-to-set-up-webdav-with-lighttpd-on-debian-lenny
  - Webdav server with lighttpd
    http://blog.marxy.org/2006/12/webdav-server-with-lighttpd.html

* Growl notification for sabznbd+ from Linux                    :@growl:@mac:
  - netgrowl.py - Tao of Mac
    http://the.taoofmac.com/space/Projects/netgrowl
  - bioCS: Sending Growl notifications from Python scripts
    http://blog.mckuhn.de/2007/10/sending-growl-notifications-from-python.html
  - Modified the script slightly to:
    : #!/usr/bin/env python
    : 
    : from netgrowl import *
    : import sys
    : 
    : def growlNotify(title = "Script Finished", message = ""):
    : 
    :    addr = ("moya.bouzou.org", GROWL_UDP_PORT)
    :    s = socket(AF_INET,SOCK_DGRAM)
    : 
    :    # Perform registration. Uncomment and run once to register.
    : #    p = GrowlRegistrationPacket(application="sabnzbd network", password="growbouz03")
    : #    p.addNotification("Download Finished", enabled=True)
    : 
    : #    s.sendto(p.payload(), addr)
    : 
    :    if not message:
    :    message = sys.argv[0]
    : 
    :    p = GrowlNotificationPacket(application="sabnzbd network",
    :        notification="Download Finished", title=title,
    :        description=message, priority=1,
    :        sticky=False, password="growbouz03")
    :    s.sendto(p.payload(),addr)
    :    s.close()
    : 
    : if __name__ == '__main__':
    :    growlNotify()


